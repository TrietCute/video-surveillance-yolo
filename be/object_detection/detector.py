import time
import os
import cv2
import numpy as np
from threading import Lock
from ultralytics import YOLO
from queue import Queue
from utils.helpers import draw_boxes
from utils.logger import log_event
from .allowed_classes import ALLOWED_CLASSES, DANGEROUS_ANIMALS, WEAPON_CLASSES, HUMAN_CLASSES
from config import VIDEO_OUTPUT_DIR

class Detector:
    def __init__(self, cam_id: str):
        self.model = YOLO("best.pt")
        self.cam_id = cam_id
        self.running = True
        self.lock = Lock()

        # Tr·∫°ng th√°i ph√°t hi·ªán
        self.latest_raw_frame = None
        self.latest_boxes = None
        self.last_detect_time = 0
        self.last_abnormal_time = 0
        
        # C·ªù hi·ªáu cho bi·∫øt c√≥ s·ª± ki·ªán b·∫•t th∆∞·ªùng ƒëang di·ªÖn ra hay kh√¥ng
        self.is_abnormal = False

        # C√°c h·∫±ng s·ªë
        self.DETECT_INTERVAL = 1  # Ch·ªâ ch·∫°y ph√°t hi·ªán m·ªói gi√¢y m·ªôt l·∫ßn
        self.ABNORMAL_END_DELAY = 5  # TƒÉng th·ªùi gian ch·ªù ƒë·ªÉ tr√°nh d·ª´ng ghi h√¨nh qu√° s·ªõm
        self.STAY_THRESHOLD = 10  # Th·ªùi gian m·ªôt ng∆∞·ªùi ƒë∆∞·ª£c ph√©p ƒë·ª©ng g·∫ßn c·ª≠a

    def outside_working_hours(self):
        now = time.localtime()
        return now.tm_hour < 8 or now.tm_hour >= 20

    def detect_on_frame(self, frame):
        now = time.time()

        # Gi·ªõi h·∫°n t·∫ßn su·∫•t ph√°t hi·ªán ƒë·ªÉ ti·∫øt ki·ªám t√†i nguy√™n
        if now - self.last_detect_time < self.DETECT_INTERVAL:
            return

        # Ch·ªâ ph√°t hi·ªán c√°c class cho ph√©p
        class_ids = [
            i for i, name in self.model.names.items()
            if name.lower() in ALLOWED_CLASSES
        ]
        results = self.model(frame, classes=class_ids, verbose=True) # Th√™m verbose=False ƒë·ªÉ log g·ªçn h∆°n
        
        with self.lock:
            self.latest_boxes = results[0].boxes if results else None

        # T√°ch c√°c lo·∫°i object ra t·ª´ng nh√≥m
        person_boxes, weapon_boxes, animal_boxes, door_boxes = [], [], [], []

        if not self.latest_boxes:
            # N·∫øu kh√¥ng ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng n√†o, ki·ªÉm tra xem c√≥ n√™n k·∫øt th√∫c tr·∫°ng th√°i b·∫•t th∆∞·ªùng kh√¥ng
            if self.is_abnormal and (now - self.last_abnormal_time > self.ABNORMAL_END_DELAY):
                print(f"[INFO] üõë K·∫øt th√∫c tr·∫°ng th√°i b·∫•t th∆∞·ªùng cho cam {self.cam_id} do kh√¥ng c√≥ ph√°t hi·ªán.")
                self.is_abnormal = False
                log_event("abnormal_end", 1.0, self.cam_id, video_path="")
            self.last_detect_time = now
            return

        for r in results:
            for box in r.boxes:
                label = self.model.names[int(box.cls)].lower()
                
                if label in HUMAN_CLASSES:
                    person_boxes.append(box)
                elif label in WEAPON_CLASSES:
                    weapon_boxes.append(box)
                elif label in DANGEROUS_ANIMALS:
                    animal_boxes.append(box)
                elif label == "door":
                    door_boxes.append(box)

        # === LOGIC KI·ªÇM TRA S·ª∞ KI·ªÜN B·∫§T TH∆Ø·ªúNG ===
        is_currently_abnormal = False

        # 1. ƒê·ªông v·∫≠t nguy hi·ªÉm
        if animal_boxes:
            is_currently_abnormal = True
            log_event("dangerous_animal", float(animal_boxes[0].conf), self.cam_id, video_path="")

        # 2. Ng∆∞·ªùi ngo√†i gi·ªù l√†m vi·ªác
        if person_boxes and self.outside_working_hours():
            is_currently_abnormal = True
            log_event("person_outside_working_hours", float(person_boxes[0].conf), self.cam_id, video_path="")

        # 3. Ng∆∞·ªùi c·∫ßm v≈© kh√≠
        for pbox in person_boxes:
            px1, py1, px2, py2 = map(int, pbox.xyxy[0])
            for wbox in weapon_boxes:
                wx1, wy1, wx2, wy2 = map(int, wbox.xyxy[0])
                if not (wx2 < px1 or wx1 > px2 or wy2 < py1 or wy1 > py2):
                    is_currently_abnormal = True
                    log_event("person_with_weapon", float(wbox.conf), self.cam_id, video_path="")
                    break
            if is_currently_abnormal: break

        # 4. Ng∆∞·ªùi ƒë·ª©ng g·∫ßn c·ª≠a qu√° l√¢u
        near_door = False
        for pbox in person_boxes:
            px1, py1, px2, py2 = map(int, pbox.xyxy[0])
            pcx, pcy = (px1 + px2) // 2, (py1 + py2) // 2
            for dbox in door_boxes:
                dx1, dy1, dx2, dy2 = map(int, dbox.xyxy[0])
                if dx1 <= pcx <= dx2 and dy1 <= pcy <= dy2:
                    near_door = True
                    break
            if near_door: break

        if near_door:
            if not hasattr(self, "door_start_time"):
                self.door_start_time = now
            elif now - self.door_start_time > self.STAY_THRESHOLD:
                is_currently_abnormal = True
                log_event("person_standing_too_long_near_door", 1.0, self.cam_id, video_path="")
        else:
            if hasattr(self, "door_start_time"):
                del self.door_start_time
        
        # === C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI B·∫§T TH∆Ø·ªúNG CHUNG ===
        if is_currently_abnormal:
            self.last_abnormal_time = now
            if not self.is_abnormal:
                print(f"[INFO] üî• B·∫Øt ƒë·∫ßu tr·∫°ng th√°i b·∫•t th∆∞·ªùng cho cam {self.cam_id}")
                self.is_abnormal = True
        elif self.is_abnormal and (now - self.last_abnormal_time > self.ABNORMAL_END_DELAY):
            print(f"[INFO] üõë K·∫øt th√∫c tr·∫°ng th√°i b·∫•t th∆∞·ªùng cho cam {self.cam_id}")
            self.is_abnormal = False
            log_event("abnormal_end", 1.0, self.cam_id, video_path="")

        self.last_detect_time = now

    def get_latest_annotated_frame(self):
        with self.lock:
            frame = self.latest_raw_frame.copy() if self.latest_raw_frame is not None else None
            if frame is None:
                return None
            
            # V·∫Ω c√°c box ph√°t hi·ªán m·ªõi nh·∫•t l√™n frame
            if self.latest_boxes:
                frame = draw_boxes(frame, self.latest_boxes, self.model.names)     
            return frame

    def cleanup(self):
        print(f"Cleanup detector for cam {self.cam_id}")
        pass
