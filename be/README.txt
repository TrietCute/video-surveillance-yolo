L·ªánh ch·∫°y: ./run.bat (ch·∫°y c·∫£ fe v√† be)
m√°y s·ªë 0 l√† d√πng camera m√°y t√≠nh.

Ch·ªânh frame mu·ªën skip trong file object-detection.py
Database MongoDB, v√†o file config ƒë·ªÉ l·∫•y link
·∫¢nh ch·ª•p l·∫°i l∆∞u trong th∆∞ m·ª•c images

Ch·∫°y ip web cam:
1. C√†i ƒë·∫∑t IP Webcam t·ª´ GG Play.
2. V√†o video preferences, ch·ªânh camera l·∫°i (kh√¥ng d√πng Camera2). Ch·ªânh video resolution v√† photo resolution. (ƒê·ªÅ xu·∫•t 800x600).
3. K√©o xu·ªëng cu·ªëi, ch·ªçn Start Server. S·∫Ω th·∫•y ip t·ª´ m√°y. (ƒê·∫£m b·∫£o m√°y t√≠nh v√† ƒëi·ªán tho·∫°i k·∫øt n·ªëi c√πng wifi)
<<<<<<< HEAD:be/README.txt

C√≤n l·ªói:
- Ch∆∞a ch·ª•p ƒë∆∞·ª£c ·∫£nh.
- M√†n h√¨nh frame c√≤n ping cao, b·ªã ch·∫≠m.
- Ch∆∞a test th·ª≠ nhi·ªÅu camera.
=======
4. L·ªánh ch·∫°y:
python object-detection.py --source "http://<IP>:<port c·ªßa ip web cam (m·∫∑c ƒë·ªãnh 8080)>/video" --save-frame

D·ª´ng app: Ctrl + C trong terminal ƒëang ch·∫°y.

Ch∆∞a c√≥ x·ª≠ l√Ω ƒëa camera, ch∆∞a c√≥ ph·∫ßn x·ª≠ l√Ω b·∫•t th∆∞·ªùng, nh·∫≠n di·ªán khi d√πng ip webcam c√≤n b·ªã ch·∫≠m.

C√≥ th·ªÉ s·ª≠a l·∫°i c·∫•u tr√∫c Database (tr∆∞·ªùng h·ª£p c√≥ nhi·ªÅu camera)
{
  "_id": ObjectId,
  "timestamp": ISODate("2025-06-19T22:45:00Z"),     // ng√†y gi·ªù ph√°t hi·ªán
  "object": "person",                                // ƒë·ªëi t∆∞·ª£ng ph√°t hi·ªán
  "confidence": 0.89,                                // ƒë·ªô tin c·∫≠y
  "frame_shape": [720, 1280, 3],                     // k√≠ch th∆∞·ªõc ·∫£nh
  "camera_id": "CAM01",                              // ID camera (tu·ª≥ ch·ªçn)
  "image_path": "snapshots/20250619_224500_person.jpg"  // n·∫øu c√≥ l∆∞u ·∫£nh
}

V·ªÅ x·ª≠ l√Ω s·ª± ki·ªán b·∫•t nh·ªù:
C√°ch 1: ƒê·ªãnh nghƒ©a th·ªß c√¥ng
V√≠ d·ª•:
if label == "person":
    if in_restricted_area(bbox):  # ki·ªÉm tra v√πng c·∫•m
        log_event(..., type="intrusion")
üîπ C√°ch 2: Train m√¥ h√¨nh ‚Äúanomaly detection‚Äù ri√™ng
D√πng m√¥ h√¨nh h·ªçc h√†nh vi b√¨nh th∆∞·ªùng:
- Autoencoder
- RNN/LSTM
- CNN+Temporal Attention
‚Üí N·∫øu ƒë·∫ßu v√†o kh√°c xa h√†nh vi ƒë√£ h·ªçc ‚Üí coi l√† b·∫•t th∆∞·ªùng.

V·ªÅ l∆∞u v√†o CSDL n·∫øu c√≥ b·∫•t th∆∞·ªùng (t·ª©c l√† kh√¥ng l∆∞u to√†n b·ªô m√† khi n√†o c√≥ b·∫•t th∆∞·ªùng m·ªõi l∆∞u - ch∆∞a r√µ r√†ng logic ch·ªó n√†y)
a) Trong file logger:
def log_event(label, conf, frame, save_img=False, reason=None):
    if reason is None:
        return  # Kh√¥ng ph·∫£i s·ª± ki·ªán c·∫ßn l∆∞u
    now = datetime.now()
    doc = {
        "timestamp": now,
        "object": label,
        "confidence": round(float(conf), 2),
        "frame_shape": list(frame.shape),
        "event_type": reason   # ‚Üê th√™m l√Ω do
    }
    ...
    collection.insert_one(doc)

b) Trong file object-detection:
if label == "person":
    if in_restricted_area(box.xyxy):  # n·∫øu trong v√πng c·∫•m
        log_event(label, conf, frame, save_img=True, reason="intrusion")
>>>>>>> refs/remotes/origin/main:README.txt
